[project]
name = "readnext"
version = "0.1.0"
description = "Hybrid recommender system for computer science papers"
authors = [{ name = "Joel Beck", email = "joel.beck@stud.uni-goettingen.de" }]
dependencies = [
    # spacy model can be installed with pip from GitHub release
    "en-core-web-sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.5.0/en_core_web_sm-3.5.0-py3-none-any.whl",
    "gensim>=4.3.1",
    "joblib>=1.2.0",
    "matplotlib>=3.7.1",
    "numpy>=1.24.2",
    "polars[pandas,pyarrow]>=0.18.3",
    "pydantic>=1.10.9",
    "python-dotenv>=1.0.0",
    "requests>=2.28.2",
    "rich[jupyter]>=13.3.4",
    "spacy>=3.5.1",
    "torch>=2.0.0",
    "tqdm>=4.65.0",
    "transformers>=4.27.4",
]
requires-python = "==3.10.*"
readme = "README.md"
license = { text = "MIT" }

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project.urls]
Homepage = "https://github.com/joel-beck/readnext"
Repository = "https://github.com/joel-beck/readnext"

[tool.pdm.dev-dependencies]
dev = [
    "black>=23.3.0",
    "ipykernel>=6.22.0",
    "mkdocs-material>=9.1.9",
    "mkdocs>=1.4.3",
    "mypy>=1.2.0",
    "notebook>=6.5.4",
    "pre-commit>=3.2.2",
    "pytest-clarity>=1.0.1",
    "pytest-cov>=4.0.0",
    "pytest-lazy-fixture>=0.6.3",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.3.1",
    "pytest>=7.2.2",
    "ruff>=0.0.261",
    "tabulate>=0.9.0",
    "types-requests>=2.28.11.17",
]

[tool.pdm.scripts]
# built-in commands: pdm add, pdm remove, pdm install, pdm fix, pdm update, pdm self
# update, pdm list, pdm show, pdm build, pdm publish
# see docs at
# https://pdm.fming.dev/latest/usage/dependency/#select-a-subset-of-dependency-groups-to-be-installed-or-locked # noqa
# to install all or specific dependency groups
setup = "pdm install"
update-pdm = "pdm self update"
update-deps = "pdm update"
update-all = { composite = ["update-pdm", "update-deps"] }
format = "black ."
lint = "ruff --fix --exit-non-zero-on-fix --show-fixes ."
check = "mypy ."
check-no-tests = "mypy . --exclude tests" # do not run mypy on `tests` directory
test = "pytest"
test-cov = "pytest --cov=readnext"
test-slow = "pytest -m 'slow'" # run all tests marked with `@pytest.mark.slow`
test-fast = "pytest -m 'not slow'" # run all tests except those marked with `@pytest.mark.slow`
test-updated = "pytest -m 'updated'" # run all tests marked with `@pytest.mark.updated`
test-updated-fast = "pytest -m 'updated and not slow'"
# run all tests except those marked with `@pytest.mark.skip_ci` and create coverage report
test-ci = "pytest -m 'not skip_ci' --cov=readnext --cov-report=xml"
pre = "pre-commit run --all-files"
serve = "mkdocs serve"
deploy = { shell = "mkdocs build && mkdocs gh-deploy" }

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

# see all options at
# https://mypy.readthedocs.io/en/stable/config_file.html#the-mypy-configuration-file
[tool.mypy]
plugins = "pydantic.mypy"
# Import discovery
ignore_missing_imports = true
# Disallow dynamic typing
disallow_any_expr = false
disallow_any_explicit = false
# Untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
# None and Optional handling
implicit_optional = false
strict_optional = true
# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = false # too many false positives
warn_no_return = true
warn_return_any = false
warn_unreachable = true
# Miscellaneous strictness flags
allow_redefinition = true
strict_equality = true
# Configuring error messages
show_error_context = true
hide_error_codes = false
pretty = true
color_output = true
error_summary = true

[tool.pytest.ini_options]
testpaths = ["tests"]
# command line flags that are automatically added to all pytest commands
addopts = "-n auto --verbose --diff-symbols"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
markers = [
    "slow: marks tests as slow (run with `pytest -m 'slow', exclude with `pytest -m 'not slow'`)",
    "skip_ci: marks tests that are not run in CI (run with `pytest -m 'skip_ci'`)",
]

[tool.coverage.run]
branch = true
omit = [
    # exclude files in tests directory from coverage
    "tests/*",
    # exclude `__init__.py` files from coverage
    "*/__init__.py",
    # exclude executable scripts in `readnext/scripts` directory from coverage
    "readnext/scripts/*",
    # exclude utility functions in `readnext/utils/` directory that are not supposed to
    # be tested from coverage
    "readnext/utils/aliases.py",
    "readnext/utils/io.py",
    "readnext/utils/decorators.py",
    "readnext/utils/logging.py",
    "readnext/utils/repr.py",
    # exclude files that are tested by loading locally stored data that are not available in CI
    "readnext/inference/constructor.py",
    "readnext/inference/constructor_plugin_unseen.py",
    "readnext/inference/constructor_plugin_unseen_language_models.py",
    "readnext/inference/inference_data.py"
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "def __repr__",
    "def __str__",
    "if TYPE_CHECKING:",
    "from typing_extensions import "
]

[tool.ruff]
line-length = 100
fix = true # autofix behavior
show-fixes = true # enumerate fixed violations
show-source = true # show source code snippets when reporting lint violations
format = "grouped" # Group violations by containing file
ignore-init-module-imports = true # Avoid automatically removing unused imports in __init__.py files
# see explanation of letter codes at https://beta.ruff.rs/docs/rules/
select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "E", # pycodestyle Error
    "F", # Pyflakes
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    # "NPY", # NumPy-specific rules # causes toml parsing error: unknown field
    "PD", # pandas-vet
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle Warning

]
ignore = [
    "ANN101", # missing type annotation for `self` in method
    "ANN102", # missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "N803", # argument name should be lowercase
    "N806", # variable in function should be lowercase
    "PD015", # use `.merge()` instead of `pd.merge()`, incorrect for Series
    "PD901", # don't use `df` as a variable name
    "PT004", # Fixture does not return anything, add leading underscore
    "PT011", # `pytest_raises(ValueError)` is too broad
    "RUF007", # prefer `itertools.pairwise()` over `zip()` when iterating over successive pairs
    "RUF100", # unused `noqa`

]
# Never try to fix automatically
unfixable = [
    "F401", # unused imports
    "F841", # unused variables

]

[tool.ruff.flake8-annotations]
suppress-dummy-args = true # suppress violations "dummy" variables like `_`

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["id"] # ignore violations for `id` builtin

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true # Allow dict calls with keyword arguments (e.g. `dict(a=1, b=2)`)

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false # `@pytest.fixture` instead of `@pytest.fixture()`
mark-parentheses = false # `@pytest.mark.foo` instead of `@pytest.mark.foo()`

[tool.ruff.isort]
combine-as-imports = true # combines `as` imports on the same line

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to use `cls` instead of `self` as first
# argument
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator"
]
